# python.setup.py
#
# Job responsible for running Python steps for Linux and macOS. The jobs are responsible for
#
#  * Building, linting and testing on Linux and macOS for various Python versions
#  * Releasing on-demand the Python package to PyPI
#    * This can be achieved by triggering a manual build and providing a queue variable 'release: true'
#

parameters:
  # This allows flexibility in the versions of Python tested, done as a workaround because Azure-DevOps variables are limited
  # See https://stackoverflow.com/questions/54372758/azure-devops-yaml-pipelines-specification-of-matrix-through-build-variable
  pythonTestVersions: "{Python35: {python.version: '3.5'}, Python36: {python.version: '3.6'}, Python37: {python.version: '3.7'}}"
  dockerDeploy: true
  dockerDeployFile: "Dockerfile"
  dockerRegistryConnector: "tomtom-docker-registry-bintray"
  dockerRepo: "python"
  # Name of 'Service connection' defined in Azure DevOps project settings
  # See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/twine-authenticate?view=azure-devops#arguments
  pypiConnector: "testpypi-tomtom-dev"
  pythonUseVersion: "3.6"

jobs:
# Creates a output variable with the Python versions to test
- job: 'Setup'
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - powershell: write-host "##vso[task.setvariable variable=jobMatrix;isOutput=true]$parameters.pythonTestVersions"
    name: "Python_Versions"

- job: 'Linux'
  dependsOn:
    - Setup
  strategy:
    matrix: $[ dependencies.Setup.outputs['jobMatrix'] ]
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - template: ../steps/python/python.build.yml


- job: 'macOS'
  dependsOn:
    - Setup
  strategy:
    matrix: $[ dependencies.Setup.outputs['jobMatrix'] ]
  pool:
    vmImage: 'macos-10.13'
  steps:
  - template: ../steps/python/python.build.yml


- job: 'Windows'
  dependsOn:
    - Setup
  strategy:
    matrix: $[ dependencies.Setup.outputs['jobMatrix'] ]
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: ../steps/python/python.build.yml


- job: 'Deploy'
  dependsOn:
    - macOS
    - Linux
    - Windows
  condition: |
    and(succeeded('macOS'),
        succeeded('Windows'),
        succeeded('Linux'),
        eq(variables['Build.Reason'], 'Manual'),
        or(eq(variables['release'], 'true'),
           eq(variables['dockerSnapshot'], 'true')))
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
  - group: GitHub
  steps:
  - template: ../steps/python/python.deploy.yml
    parameters:
      dockerDeploy: "${{ parameters.dockerDeploy }}"
      dockerDeployFile: "${{ parameters.dockerDeployFile }}"
      dockerRegistryConnector: "${{ parameters.dockerRegistryConnector }}"
      dockerRepo: "${{ parameters.dockerRepo }}"
      gitCiToken: "$(GH_TOKEN)"
      gitCiUserMail: "$(GH_USER_MAIL)"
      gitCiUserName: "$(GH_USER_NAME)"
      pypiConnector: "${{ parameters.pypiConnector }}"
      pythonUseVersion: "${{ parameters.pythonUseVersion }}"
