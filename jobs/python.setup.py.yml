# python.setup.py
#
# Job responsible for running Python steps for Linux and macOS. The jobs are responsible for
#
#  * Building, linting and testing on Linux and macOS for various Python versions
#  * Releasing on-demand the Python package to PyPI
#    * This can be achieved by triggering a manual build and providing a queue variable 'release: true'
#

parameters:
  dockerDeploy: true
  dockerDeployFile: "Dockerfile"
  dockerRegistryConnector: "tomtom-docker-registry-bintray"
  dockerRepo: "python"
  # Name of 'Service connection' defined in Azure DevOps project settings
  # See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/twine-authenticate?view=azure-devops#arguments
  pypiConnector: "testpypi-tomtom-dev"
  pythonDeployVersion: "3.6"
  pythonTestVersions:
  - name: Python36
    version: "3.6"
  - name: Python37
    version: "3.7"
  jobs:
  - name: Linux
    vmImage: ubuntu-18.04
  - name: macOS
    vmImage: macos-10.15
  - name: Windows
    vmImage: vs2017-win2016

jobs:
- ${{ each job in parameters.jobs }}:
  - job: ${{ job.name }}
    strategy:
      matrix: 
        ${{ each pyVersion in parameters.pythonTestVersions }}:
          ${{ pyVersion.name }}:
            python.version: ${{ pyVersion.version }}
    pool:
      vmImage: ${{ job.vmImage }}
    steps:
    - template: ../steps/python/python.build.yml

- job: 'Deploy'
  dependsOn:
    - macOS
    - Linux
    - Windows
  condition: |
    and(succeeded('macOS'),
        succeeded('Windows'),
        succeeded('Linux'),
        eq(variables['Build.Reason'], 'Manual'),
        or(eq(variables['release'], 'true'),
           eq(variables['dockerSnapshot'], 'true')))
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
  - group: GitHub
  steps:
  - template: ../steps/python/python.deploy.yml
    parameters:
      dockerDeploy: "${{ parameters.dockerDeploy }}"
      dockerDeployFile: "${{ parameters.dockerDeployFile }}"
      dockerRegistryConnector: "${{ parameters.dockerRegistryConnector }}"
      dockerRepo: "${{ parameters.dockerRepo }}"
      gitCiToken: "$(GH_TOKEN)"
      gitCiUserMail: "$(GH_USER_MAIL)"
      gitCiUserName: "$(GH_USER_NAME)"
      pypiConnector: "${{ parameters.pypiConnector }}"
      pythonUseVersion: "${{ parameters.pythonDeployVersion }}"
